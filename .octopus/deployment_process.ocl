step "set-up-rg-clone-on-agent" {
    name = "Set up RG Clone on agent"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Script.ScriptFileName = "#{Octopus.Project.Git.BasePath}/CreateImageRunBook/SetUpRgClone.sh"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "create-dry-run-container" {
    name = "Create dry run container"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Script.ScriptFileName = "#{Octopus.Project.Git.BasePath}/CreateImageRunBook/CreateDryRunDc.ps1"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "dry-run-deploy" {
    name = "Dry run deploy"

    action {
        properties = {
            Flyway.Authentication.Method = "usernamepassword"
            Flyway.Command.BaseLineOnMigrate = "false"
            Flyway.Command.FailOnDrift = "true"
            Flyway.Command.Locations = "filesystem:#{Octopus.Action.Package[Flyway.Package.Value].ExtractedPath}/migrations"
            Flyway.Command.OutOfOrder = "false"
            Flyway.Command.SkipExecutingMigrations = "false"
            Flyway.Command.Target = "latest"
            Flyway.Command.Value = "migrate"
            Flyway.Executable.Path = "/flyway/flyway"
            Flyway.License.Key = "#{FLYWAY.LICENCE}"
            Flyway.Package.Value = "{\"PackageId\":\"alex-yates-redgate/AutoPilotSimulator\",\"FeedId\":\"github\"}"
            Flyway.Target.Url = "#{OctopusParameters[\"Octopus.Action[Create dry run container].Output.jdbcConnectionString\"]}"
            Octopus.Action.Template.Id = "ActionTemplates-21"
            Octopus.Action.Template.Version = "13"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "octopuslabs/flyway-workertools:10.8.1"
        }

        packages "Flyway.Package.Value" {
            acquisition_location = "Server"
            feed = "github"
            package_id = "alex-yates-redgate/AutoPilotSimulator"
            properties = {
                Extract = "True"
                PackageParameterName = "Flyway.Package.Value"
                SelectionMode = "deferred"
            }
        }
    }
}

step "flyway-database-migrations" {
    name = "Flyway Database Migrations"

    action {
        properties = {
            Flyway.Authentication.Method = "usernamepassword"
            Flyway.Command.BaseLineOnMigrate = "false"
            Flyway.Command.FailOnDrift = "true"
            Flyway.Command.Locations = "filesystem:#{Octopus.Action.Package[Flyway.Package.Value].ExtractedPath}/migrations"
            Flyway.Command.OutOfOrder = "false"
            Flyway.Command.SkipExecutingMigrations = "false"
            Flyway.Command.Target = "latest"
            Flyway.Command.Value = "migrate"
            Flyway.Executable.Path = "/flyway/flyway"
            Flyway.License.Key = "#{FLYWAY.LICENCE}"
            Flyway.Package.Value = "{\"PackageId\":\"alex-yates-redgate/AutoPilotSimulator\",\"FeedId\":\"github\"}"
            Flyway.Target.Url = "#{DB_CONNECTION_STRING}"
            Octopus.Action.Template.Id = "ActionTemplates-21"
            Octopus.Action.Template.Version = "13"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "octopuslabs/flyway-workertools:10.8.1"
        }

        packages "Flyway.Package.Value" {
            acquisition_location = "Server"
            feed = "github"
            package_id = "alex-yates-redgate/AutoPilotSimulator"
            properties = {
                Extract = "True"
                PackageParameterName = "Flyway.Package.Value"
                SelectionMode = "deferred"
            }
        }
    }
}